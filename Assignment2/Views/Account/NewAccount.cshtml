@model Assignment2.ViewModels.NewAccountViewModel
@{

    ViewBag.Title = "NewAccount";
}

<h2>NewAccount</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Visitor</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProgramOp, htmlAttributes: new { @class = "control-label col-md-2" })

            @*@Html.EditorFor(model => model.ProgramOp, new { htmlAttributes = new { @class = "form-control" } })*@
            @{
                List<SelectListItem> listItems = new List<SelectListItem>();
                listItems.Add(new SelectListItem
                {
                    Text = "Application",
                    Value = "Application"
                });
                listItems.Add(new SelectListItem
                {
                    Text = "Programming",
                    Value = "Programming",
                    //Selected = true
                });
                listItems.Add(new SelectListItem
                {
                    Text = "Web",
                    Value = "Web"
                });
            }

            @Html.DropDownListFor(model => model.ProgramOp, listItems, "-- Select Status --", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ProgramOp, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmailUpdates, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmailUpdates, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EmailUpdates, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Make Password" name="Create" class="btn btn-default" />
                <input type="submit" value="reset" name="reset" class="btn btn-default" />
            </div>
        </div>



    </div>
}

<div>
    @Html.ActionLink("To Password", "Password")
</div>

<div>
    @Html.ActionLink("Back to Login", "Login")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
}